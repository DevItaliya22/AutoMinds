// WIP : have to add the schema 

// when u do changes in the schema , you have to run npx prisma generate , which will help u to give corrrect types and suggestions in the code
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String   @id @default(uuid())
  name        String
  imageUrl    String
  email       String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  AccessToken AccessToken?
  Workflows    Workflow[]
}

model AccessToken {
  id                     String   @id @default(uuid())
  userId                 String   @unique
  user                   User     @relation(fields: [userId], references: [id])

  GoogleRefreshToken     String   @default("")
  GoogleAccessTokenExpireAt DateTime 

  // All AccessTokens should be here and name should be of '${ConnectionType}AccessToken' type and here ConnectionType is in libs/types.ts
  GoogleAccessToken      String   @default("")
  GithubAccessToken      String   @default("")
}


model Workflow {
  id          String   @id @default(uuid())
  name        String
  description String
  userId      String
  status      WorkflowStatus @default(draft)

  lastRun     String?
  user        User     @relation(fields: [userId], references: [id])
  nodes       Node[]   @relation("WorkflowNodes") // One-to-many relationship with Node
  edges       Edge[]   @relation("WorkflowEdges") // One-to-many relationship with Edge

  @@unique([name, userId])
}

// Tree data structure for the workflow
model Node {
  id            String   @id @default(uuid())
  name          String
  description   String
  type          NodeType
  workflowId    String
  workflow      Workflow @relation("WorkflowNodes", fields: [workflowId], references: [id]) // Many-to-one relationship with Workflow
  workerType    WorkerType
  // this will store position for react flow
  positionX     Float
  positionY     Float
}

model Edge  {
  id         String @id @default(uuid())
  sourceId   String // this will be the id of the source node
  targetId   String // this will be the id of the target node

  workflowId String // this will be the id of the workflow
  workflow   Workflow @relation("WorkflowEdges", fields: [workflowId], references: [id]) // Many-to-one relationship with Workflow
}

enum WorkerType {
  Trigger
  Action
}
enum NodeType {
  Google
  Github 
}

enum WorkflowStatus {
  active
  inactive
  draft
}